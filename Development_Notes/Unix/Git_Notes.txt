设置Git >>
在使用Git之前，首先要设置用户的全局用户名和邮箱。
$ git config --global user.name "[你的用户名]"
$ git config --global user.email "[你的邮箱]"

设置Git的默认编辑器：
$ git config --global core.editor [编辑器名称]

----


创建版本库 >>
选择一个可用的空目录作为源码仓库，运行：
$ git init
就成功地生成了一个源码版本库，成功生成了版本库之后用户的源码仓库目录下会多出一个名为".git"的目录，该目录记录了版本库的各种信息，不要随意修改。

----


向版本库添加文件 >>
首先执行添加文件命令：
$ git add [文件路径]
然后提交操作：
$ git commit
如果进行了错误的操作，在提交之前，可以放弃缓冲区的更改：
$ git reset
如果在提交操作时需要添加提交说明，则可以使用命令：
$ git commit -m "[提交说明]"
如果需要修改提交说明，使用命令修改最近一次的提交说明：
$ git commit --amend

----


修改历史提交说明 >>
要修改历史版本的提交说明，首先要重构目标提交说明所在的提交的前一次提交。
修改历史提交说明，使用命令：
$ git rebase -i [commit_id]
然后会进入交互式的历史提交查看页面，在这个页面将要修改的提交说明前的pack字段改为edit。
然后Git会自动支跳转到该次提交，这时使用命令：
$ git commit --amend
像往常提交了错误的提交说明一样修改提交说明。
然后重新构建提交：
$ git rebase --continue
这时，Git又会重新跳转到最近的提交，使用指令查看历史提交说明，就会发现更改已经生效了。

----


让Git忽略工作目录中的文件 >>
默认情况下，Git会尝试工作目录中的所有文件视为目标文件，一旦有文件处于未跟踪状态，便会给予提示(存在尚未跟踪的文件)。
要想让Git忽略某些文件，可以在工作目录中创建.gitignore文件，将忽略文件的文件名分行写入其中(一行一个文件名)。
使用命令：
$ git status -s
可以查看到文件状态，"??"符号代表的即是未跟踪的文件。
另外，还可以选择将.gitignore文件自身也加入到忽略列表中。

----


查看/比较版本库 >>
使用命令查看当前暂存区的状态：
$ git status
显示某个版本的具体变化：
$ git show [commit_id/标签名]				#不写commit_id时默认为显示最近一次提交的详细信息
比较文件当前状态与版本库中的区别：
$ git diff			#该命令可以看到当前文件与最近一次的提交版本有哪些区别
也可以比较不同版本/分支：
$ git diff [commit_id] 		#将当前分支与指定commit_id的版本进行比较
$ git diff [commit_id1] [commit_id2] 		#将两个commit版本进行比较
$ git diff [分支名1] [分支名2]

----


Git版本控制 >>
交互式查看版本库的历史提交记录和commit_id：
$ git log
只查看每次的commit_id：
$ git log --pretty=oneline
根据每次提交的commit_id可以选择回退到历史版本：
$ git reset --hard [commit_id]
回退到历史版本之后，将不能在git log命令中看到自回退版本之后的commit版本id，如果需要之后的版本id，使用命令：
$ git reflog
给最近一次提交的版本添加版本标签：
$ git tag [标签名]
默认是不添加版本标签说明的，如果需要添加标签说明可以：
$ git tag [标签名] -m "[版本说明]"
给指定某次提交添加版本标签：
$ git tag [标签名] [commit_id]
如果不需要某个标签了，可以删除：
$ git tag -d [要删除的标签名]

----


管理Git分支 >>
查看分支：
$ git branch
创建分支：
$ git branch [分支名]
切换分支：
$ git checkout [分支名]
创建+切换分支：
$ git checkout -b [分支名]
合并某分支到当前分支：
$ git merge [分支名]
删除分支：
$ git branch -d [分支名]
