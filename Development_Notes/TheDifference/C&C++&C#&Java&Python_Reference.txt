在常见的编程语言中，c/c++默认所有变量均为值类型，c#/java 变量分为值类型(基础变量)和引用类型(类对象)，而python中变量没有类型的概念，变量保存的都是引用，所有变量均为引用类型。
在java、python、c/c++、c#中，函数传参时默认均为值传递。
c#和c++支持值传递或是引用传递。

举例说明：

编写一个函数swap，要求输入a，b两数的值，当函数结束时，交换a，b两个数的值。

在有指针的c语言中，可以使用指针：

void swap(int *a, int *b)
{
	*a = *a + *b;
	*b = *a - *b;
	*a = *a - *b;
}
printf("%d %d", *a, *b);

在c++中，采用左值引用的方式，函数可以写成：

void swap(int &a, int &b)
{
	a = a + b;
	b = a - b;
	a = a - b;
}
std::cout << a << " " << b << std::endl:

而在没有指针的语言中，或是便变量全为引用类型的python中，许多人总是想当然地想用引用类型交换来得到结果。
比如，在java中使用Integer来交换数值：

void swap(Integer a, Integer b)
{
	a = a + b;
	b = a - b;
	a = a - b;
}

或是在python中直接使用引用类型的特性来交换数值：

def swap(a, b):
	a = a + b
	b = a - b
	a = a - b
	
但实际上，在java和python中，这样的做法是无效的，因为即便是引用类型，形参也是"复制"了一份引用，在swap函数内部的a和b实际上只是个临时变量，交换a和b的数值实际上只是交换临时a和临时b的指向，而并没有改变a和b指向的内容，也就是说swap作用域外的真正的a和b指向的内容并未发生改变。
用c语言来解释，上面两个方法实际做的内容是：

void swap(int *a, int *b)
{
	int temp = *a + *b;
	a = &temp;
	temp = *a - *b;
	b = &temp;
	temp = *a - *b;
	a = &temp;
}

也就是说，只是将两个形参a和b相互交换了地址，而真正需要改变的*a和*b根本没有发生变化。
由于java和python语言的限制，实际上想要交换两个数的数值只有通过数组(java)和列表(python)来实现。
