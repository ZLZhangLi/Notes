Scala开发环境 >>
在Linux/Unix环境下，无需额外的Scala配置，只需从对应发行版的包管理器中直接安装Scala开发包即可。
在Windows环境下，需要新建环境变量"SCALA_HOME"，环境变量的值即为Scala的安装目录，然后将"%SCALA_HOME%\bin"加入PATH环境变量中。

----

让VIM支持Scala语法高亮 >
在bash中输入以下脚本指令：
$ mkdir -p ~/.vim/{ftdetect,indent,syntax} && for d in ftdetect indent syntax ; do wget --no-check-certificate -O ~/.vim/$d/scala.vim https://raw.githubusercontent.com/derekwyatt/vim-scala/master/syntax/scala.vim; done'
如果使用Vundle来管理插件，则可以在配置文件中添加：
Plugin 'derekwyatt/vim-scala'

----

让Eclipse支持Scala项目 >
安装Scala IDE插件即可。

----

编译/执行Scala代码 >
与编译Java代码类似，编译Scala代码使用scalac命令：
$ scalac [*.scala]
编译后即可得到字节码文件*.class。
执行字节码可以使用scala指令：
$ scala [字节码文件名称]
需要注意的是，虽然Scala是基于JVM的语言，但scalac编译得到的字节码直接由java命令执行有时候会出现一些错误。

----

使用Scala解释器 >
在命令行中输入无参数的scala指令即可进入交互式的Scala解释器。
Scala解释器与Python解释器类似，可以直接将代码一行行地输入解释器，解释器会执行代码并给出反馈，对初学者而言是一个练习的好方法。

常用的Scala解释器指令：
scala> :quit				//退出解释器
scala> :reset				//重置解释器的状态，会清空已保存的变量、类、方法等所有内容

========


Scala基本语言特性 >>
相比Java、C++等语言，Scala融合了OOP、FP等编程范式，同时语法上更灵活。

----

语法基础(概览) >
1.Scala语言中不强制要求分号，可以依行断句，只有一行带有多个语句时才要求分号隔开。
2.使用var/val定义变量/常量，类型可以由编译器推导，也可以显式指定。定义变量时甚至可以省略var/val关键字，无关键字时定义的变量默认即为val，在定义变量的同时就需要初始化变量，否则报错(抽象类中除外)。
3.使用def关键字定义方法，var/val定义函数，需要注意的是使用var定义的函数是可以更改实现的，但def定义的方法一经定义实现就不可改变。
4.没有自增/自减操作符。
5.函数/方法返回值的空类型为Unit，相当于Java/C++中的void。
6.没有原生enum类型，应继承枚举助手类Enumeration。
7.不提供类似Java/C++中的三目运算符，但if语句表达式带有返回值，可以提供类似效果。
8.访问类成员权限默认为public，因而没有public关键字，但有private和protected关键字，作用与Java一致。

----

Hello World >
创建文件 Test.scala ，输入以下代码：

object Test {
	def main(args: Array[String]): Unit
		= println("Hello World!")
}

与Java类似，Scala也是从主方法main中开始执行整个程序，不过main方法并不定义在类中，而是定义在伴生对象中。
也可以不手动定义main方法而去让伴生对象继承App特质，即可直接执行代码语句，例如：

object Test extends App {
	println("Hello World!")
}

----

方法(Method) >
与Java不同，Scala中同时支持函数与方法(Java只有方法而没有真正意义上的"函数"，只有与"函数"类似的"静态方法")。
方法由def关键字定义，可以被def方法、val函数重写。一个典型的方法格式如下：

def methodName(args: Type)：Type = {
	/* function_body */
}

Scala中方法体不需要显式使用return关键字来给出方法返回值，编译器会将函数体的最后一句代码推导出类型做为整个函数的返回值。
对于有返回值的方法，必须要在方法定义中加入等号，否则编译器不会对推导返回值。
即使方法的返回值为Unit，只要显式指定了返回值类型，则必须在方法体中加入等号。
在Scala中，方法允许省略参数，空的参数表可以直接省略，如：
def getNum: Int = 100
def getNum(): Int = 100			//以上两个定义作用相同，但只能存在一个

无参方法与空参方法只能存在一个，但二者在使用方式上略有不同，无参方法在调用时只能直接使用方法名，在方法名后加上括号调用就会出错；但空参方法既可以使用带有括号的方法调用方式，也可以省略括号，例如：
scala> def getNum: Int = 100			//定义了方法 getNum: Int
getNum: Int
scala> getNum							//正确，返回 100
res0: Int = 100
scala> getNum()							//错误，提示 error: Int does not take parameters
<console>:12: error: Int does not take parameters
	getNum()
		  ^
scala> def getNum(): Int = 200			//定义了方法 getNum(): Int
getNum: ()Int
scala> getNum							//正确，返回 200
res1: Int = 200
scala> getNum()							//正确，返回 200
res2: Int = 200

在Scala中，方法中参数允许带有默认值：
scala> var num = 100
num: Int = 100
scala> def setNum(p: Int = 0) { num = p }
setNum: (p: Int)Unit
scala> setNum()				//对于有参数的方法，即使参数带有默认值使得参数表可以为空但在调用时依然不能省略括号，否则报错
scala> println(num)
0							//输出0

----

函数(Function) >
在Scala中函数使用var/val关键字定义，即函数是一个存储了函数对象的字段。
一个典型的函数定义如下：

var functionName: FuncType = 符合签名的方法/函数/Lambda

需要注意的是，函数不允许无参，因为函数名做为表达式时的语义为函数名所代表的函数内容而非函数调用。空参函数的括号不可省略，直接使用函数名并不代表调用空参函数，比如：
scala> var show100: () => Int = () => 100
show100: () => Int = <function0>
scala> show100				//直接使用函数名得到的是函数对象而非调用函数
res0: () => Int = <function0>
scala> show100()
res1: Int = 100

========


Scala中的OOP >>
