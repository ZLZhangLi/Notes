关于声明与定义/实现的区别 >>
c/c++ >
在c/c++中，定义与声明之间有着一定的区别。
变量定义：用于为变量分配存储空间，还可为变量指定初始值。程序中，变量有且仅有一个定义。
变量声明：用于向程序表明变量的类型和名字。
定义也是声明：当定义变量时我们声明了它的类型和名字。
extern关键字：通过使用extern关键字声明变量名而不定义它。
对于函数而言带有{}的就是定义，否则就是声明。

----

c#/java >
对于c#/java等高级语言来说，函数以及变量和类的定义是全局搜索的，因此，单独的变量声明没有意义，变量的声明与定义是同时进行的，而对于函数而言，定义与声明也必须同时给出，只有函数为抽象函数的情况下才会出现只有函数声明而没有函数定义的情况。
一般而言，成员函数的定义也可以被称作是成员函数的实现。

========


关于访问控制(java中的同一个包默认指的是同属一个package中的内容) >>
c++ >
c++中的class默认成员权限是private，而struct默认的成员权限是public。
c++中的protected权限下的内容能被子类继承，但不能在类与子类之外使用(即实例化对象不可访问protected内容)。

----

java >
java中class默认成员权限处于private和protected之间(可以被同一个包内的内容访问，不能被其它包的内容访问)。
java中的protected权限下的内容能够被当前的包内的内容访问，同时也能被当前包外的其它包的子类访问。
java中的类可以带有public关键字，表示公有类，只有公有类才能被当前文件以外的代码访问。一个文件只能拥有一个公有类，且该文件的文件名必须与公有类的类名相同。

----

c# >
c#的访问控制类似与c++，但c#中多了一种访问权限internal(内部成员)，这种成员只允许被同一个项目下的成员访问。c#中的类体默认访问权限即为internal，类中的成员默认访问权限为private。
编译时命令行中输入的文件名中的内容都被视为是在同一个项目中，即只需要internal权限参加编译的文件就能够相互访问。

----

python >
python作为脚本语言，对OOP并没有完整性的支持。
python使用 _xxx 的形式定义一个类的私有成员变量，该变量在类之外不可访问，python中无法定义保护成员。

========


关于继承和限定 >>
c++ >
c++中通过const关键字来定义一个不可更改的变量。
const关键字不能用于类之前，但可以放在函数声明的尾部作为函数签名的一部分存在(即可以同时存在两个函数原型相同而区别仅仅是函数尾部有无const关键字)。
如果创建了一个const的类对象，则只能调用函数尾部存在const关键字的函数，同时函数签名中尾部有const的函数不能对当前对象本身做出修改(可以修改非当前对象的其它对象的内容)。
普通对象能够任意调用函数签名尾部带const或是普通的可访问成员函数，但如果存在两个函数名相同，参数个数相同，参数类型相同而区别仅仅是函数尾部有无const关键字的函数时，普通对象会优先调用尾部无const关键字的函数。
c++11标准中引入了final关键字，final关键字可以用在类和虚函数之后(放在类和函数之前编译会报错)，用在类之后表示该类不可被继承，用在虚函数之后表示该虚函数不可被重写(final关键字可以用在纯虚函数上，但这么做没有任何意义)。

----

java >
java中通过final来定义一个不可更改的变量。
final关键字可用于类之前，表示该类为"终极类"，不可被继承。
final关键字可用于函数之前，表示该函数不可被重写。

----

c# >
c#中同样通过关键字const来定义一个编译期不可更改的变量，但const关键字通常用来修饰值类型，不能修饰string以外的非空引用类型。
c#中const关键字不能与static关键字共同修饰同一个变量，c#中const变量自动带有static特性(所有实例共享)，但c/c++中可以。
c#中使用readonly关键字定义一个运行时的只读变量，readonly可以修饰所有类型。
c#中使用关键字sealed来定义一个不可继承的类(密封类)。
sealed关键字也可用于函数之前，表示该函数不可被重写。

========


关于值传递 >>
c++ >
c++中无论基础类型或是类对象在赋值时均为复制传递，将一个类对象赋值到另一个类对象上，实际上会调用复制构造函数，将会以保留原对象的已有变量值为前提创建一个新的同类型对象，一旦新对象创建完成之后，就与原先的对象不再有半毛钱关系，原先的对象受到修改也不会影响到通过赋值新建的对象。

----

java >
java中所有的基础类型(int, char之类)在赋值时是复制传递。
java中所有的引用类型在赋值时是引用传递，将一个类对象赋值到另一个类对象上，本质上只是传递了类对象的引用，相当于给原先类的对象取了一个"别名"，原先的对象被修改，通过赋值产生的新对象也会被修改。
需要注意的是，java中的Integer类型在对象值处于 -128~127 之间时，JVM会将其当成int型处理(提升效率)。

----

c# >
c#中的基础类型被称为值类型，c#中的值类型为其对应结构类型的别名，因而值类型是值传递，引用类型为引用传递。
值类型包括：结构体(数值类型，bool型，用户定义的结构体)、枚举、可空类型。
引用类型包括：数组，用户定义的类、接口、委托、object、字符串(string)。

----

python >
python中的变量没有类型，拥有类型的是对象，所有变量保存的都是对像的引用而非对象本身。strings，tuples，和numbers是不可更改的对象，而list，dict等则是可以修改的对象，python中的所有变量都是指向对象的"引用类型"，因而等号赋值时为复制引用，但数值类型是不可更改的，故给原先有值的变量赋新值相当于改变原有变量的指向，让原有变量指向新的数值。

========


关于子类对父类构造函数的实现 >>

c++ >
c++中子类直接在子类构造函数的初始化序列中使用父类的有参构造函数(不影响其它变量在初始化序列中赋值)。
c++通过使用当前类名实现搭配不同参数实现构造函数序列(在c++中称为构造函数委托，属于c++11新特性)。
c++通过 "~类名()" 的方式声明析构函数。

----

java >
java中子类用super关键字来实现父类的有参构造函数。
java中没有析构函数，但可以定义finalize()方法用于在类被JVM回收内存前进行手动的垃圾清理。

----

c# >
c#中使用base关键字来实现父类(基类)的有参构造函数。
c#中还可以通过this关键字(不是this引用)来实现构造函数序列。
c#中还可以定义静态构造函数。
c# 通过 "~类名()" 的方式定义析构函数。

----

python >
python中通过 "父类类名.__init__(self, 参数表)" 的形式实现父类的有参构造函数，与调用其它函数不同，self关键字不可省略。
python中使用 "__del__(self)" 来定义析构函数，析构函数在解释器销毁对象回收内存时调用。

========


关于OOP >>
c++ >
c++支持多重继承，OOP主要通过class&struct来实现。
class&struct在定义的时候花括号结尾要加分号，class&struct的区别仅仅是默认访问权限不同而已，class中的默认访问权限是private，而struct中默认的访问权限是public。
c++类中只声明函数原型而不实现的函数叫做纯虚函数，虚函数的声明中函数名之前需要有virtual关键字，使用 "=0" 进行赋值。

----

java >
java中不支持多重继承，OOP主要通过class&interface来实现。
interface中只能包含函数的声明而不能包括函数的实现(JDK1.8之后支持在接口中用default关键字定义有实现内容的函数，也可以以此实现类似多重继承)，且访问权限一定是public，所以用在implements接口时，需要将重写的函数设为public。
interface没有构造函数，也不能被直接实例化，实例化接口需要使用匿名类(所有接口)或Lambda表达式(仅限函数接口)。
java中只声明函数原型而不实现的函数叫做抽象函数，抽像函数的函数声明前加abstract关键字，带有一个以上抽象函数的类叫做抽象类，类前也要加abstract关键字。

----

c# >
c#作为c++与java杂交的产物，同时包含class&struct&interface。
与c++不同，c#中class与struct是完全不同的概念。c#中的class是引用类型，可以为null，但struct是值类型，不能为null，class传递的是引用，struct传递是值复制。
struct中成员默认private访问权限。struct中的成员也不能拥有默认值，即不能像类一样定义成员的同时赋初值。struct的构造函数必须要初始化所有的成员变量。实例化struct可以不使用new关键字。
class支持继承和多态，struct不支持(因此不能对struct使用sealed关键字)，但是struct可以和类一样实现接口。
由于struct不支持继承，其成员不能以protected 或Protected Internal修饰。
c#中的interface类似于java，但与java不同的是inteface中只能包含抽象函数而不能定义变量(java中interface允许定义变量，并可以给定义的变量赋初值)，成员不能使用public关键字(java中可以，无论是否使用public关键字都为公有成员)，成员一定是公有成员。重写interface中的函数时，需要设为公有成员。
c#中的interface可以像类一样直接实例化。

----

python >
python支持多重继承，但没有接口的概念，也不支持函数重载，可以通过函数默认参数来实现类似函数重载的效果。
python由于不支持函数重载，因此一个class只能拥有一个构造函数(__init__)，定义多个构造函数根据脚本语言特性虽然不会报错，但实际使用时只有最后一个构造函数才会真正生效。
python由于不支持函数重载，子类在继承父类时，会覆盖父类的同名函数(无论函数签名是否匹配)。
python2中的经典类在多重继承时继承路径为深度搜索，新式类(继承自object对象)为广度搜索。
python3的类全部为新式类，默认即继承自object对象。

========


关于多态性 >>
同一操作作用于不同的类的实例，将产生不同的执行结果，即不同类的对象收到相同的消息时，得到不同的结果。
对象根据所接受的消息而做出动作，同样的消息被不同的对象接受时可能导致完全不同的行为，这种现象称为多态性。
静态多态性是指定义在一个类或一个函数中的同名函数，它们根据参数表(类型以及个数)区别语义，并通过静态联编实现，例如，在一个类中定义的不同参数的构造函数。
动态多态性是指定义在一个类层次的不同类中的相同签名函数，因此要根据指针指向的对象所在类来区别语义，它通过动态联编实现。在用户不作任何干预的环境下，类的成员函数的行为能根据调用它的对象类型自动作出适应性调整，而且调整是发生在程序运行时，这就是程序的动态多态性。即，发出同样的消息被不同类型的对象接收时，有可能导致完全不同的行为。

----

c++ >
c++中多态一般通过虚函数，模版，重载来实现。前者是动态多态(运行时多态，动态绑定)，后两者是静态多态(编译时多态，静态绑定)。
java >
java中多态一般通过重写，重载来实现。java中不存在虚函数的概念，基类函数默认即是c++概念中的虚函数，使用向上转型定义的基类对象调用的函数如果被子类重写，则在调用该函数时会使用子类的该函数的实现。
c# >
c#中多态类似与c++，同样使用虚函数，模版，重载来实现。
python >
python由于不支持函数重载，也没有向上/向下转型等概念，故python不支持多态性。

========


关于Override与向上转型 >>
重写(override)是OOP中的重要概念，是指子类继承父类的同时将父类的某个函数原型重新实现。子类实例化对象时，调用该函数原型的函数时使用是子类重新实现的内容而不是从父类继承来的内容。

----

c++ >
c++中子类的函数会隐藏掉父类所有的与子类的该函数名相同函数(无论函数签名是否匹配，无论是否为虚函数)，在子类的对象中不能直接调用该函数同名的父类实现(但是在子类中可以使用 "父类名::函数签名" 形式调用权限允许的父类对应函数签名的函数实现)，无论函数签名是否匹配(但是不会影响子类自己实现的该函数名的函数)。
在c++11之后，使用 "using 父类名::函数名;" 可以使子类拥有父类该函数名所有的对应实现，在子类对象中父类的该函数的同名函数不再会被隐藏(类似java中的继承形式)。
c++在使用向上转型时，默认情况下，即使某个函数原型的函数与子类相同，调用该函数，依然使用的是父类的实现；如果需要在向上转型时使用子类的函数实现，需要将父类对应函数原型的函数声明为虚函数(函数返回值前加关键字virtual)，同时，virtual关键字只能将加了关键字的当前函数标记为虚函数，对其它当前类的同名函数无效。
c++中子类函数重写父类同原型函数时，对子类成员函数和父类成员函数的访问权限都没有要求，即使是父类的私有成员函数，只要是虚函数且函数原型相同，就可以被重写。
在c++中一个函数不能够同时拥有static关键字和virtual关键字，即静态函数不能实现向上转型后调用子类同原型函数的实现。
c++11标准中引入了override关键字，override关键字放在函数声明尾部，带有该关键字的函数会强制发生重写行为，如果带有该关键字的函数没有发生重写行为则会编译报错。

----

java >
java中的override只会让子类的函数重写掉父类函数原型一致的函数，子类override了父类的某个函数原型的函数后，在子类的对象中除了调用被override的这个函数原型会使用子类自己的实现之外，其它没有被override的内容依然是正常继承、正常使用。
同时，java中类的成员函数默认即具有c++中虚函数的特性，在使用了向上转型后，如果调用了某个函数原型被子类override过的函数，会使用子类的实现。
java的override行为对成员函数的访问权限有严格要求，父类的被override的成员函数必须是子类能够访问到的(即同一文件的类不能是private权限，不同文件的类不能是private、default权限)，而子类发生override行为的成员函数的访问权限必须大于等于父类中被override的成员函数的访问权限。
在java中，静态成员函数不再具有虚函数特性，子类的非静态函数如果与父类的静态函数原型相同，则编译报错。子类的静态函数与父类的静态函数原型相同能正常编译，但不会发生override行为，向上转型之后调用的父类函数即使存在同函数原型的子类实现也不会采用该实现。

----

c# >
c#中的override最为严格，默认情况下，子类只是对父类已有的函数原型进行隐藏(只隐藏父类该函数原型的实现，其他函数原型正常继承)，只有父类的对应函数原型的函数具有vitual、abstract或override三个关键字其中之一时，才能对父类的对应函数进行override(子类对应函数原型的函数的声明中要使用override关键字，放在函数返回类型之前)，同时，override也只会对该函数原型的函数生效，在子类的对象中除了调用被override的这个函数原型会使用子类自己的实现之外，其它没有被override的内容依然是正常继承、正常使用(类似于java)。
在c#中，带有virtual、abstract关键字的成员不能为private，在override父类同原型函数时，同样需要子类发生override行为的成员函数的访问权限大于等于父类被override的成员函数的访问权限。
c#由于默认情况下，子类同原型函数不能override父类同原型函数，所以向上转型时无法使用子类的函数实现，只有借助于虚函数才能实现(类似于c++)。
c#中，静态成员(带有static关键字)不能够被标记为vitual、abstract或override。

========


关于泛型和模板 >>

c++ >
c++中的template(模板)，用在class和struct中，同时支持int，float等基础类型和Object类型。
在c++11中，template搭配auto&decltype关键字可实现template返回值类型推断(在c++14标准中，啊uto关键字可以自动推断返回类型而无需搭配decltype关键字)。
c++中的template会在编译时根据实例化的类型对应编译成不同的实现，同时编译时会检测实例化的泛型对象的函数签名是否与类中已有的函数签名冲突，发生冲突将不能通过编译。
c++的模版不仅可用于类定义，还可用于定义函数(函数模版)。
c++类模版不支持泛型推断，函数模版支持泛型推断。
c++类模版支持部分非类型参数(int/char以及指针类型)。
c++11之后，模版支持设置默认泛型参数类型。

----

java >
java中的泛型用于class和implements，只支持Integer，String之类的Object类型。
java中泛型对象的函数签名与已有函数签名发生冲突时，同样不能通过编译。
java1.7开始支持泛型推断，java1.8引入基于上下文的泛型推断。

----

c# >
c#中的泛型语法类似于java，但实际使用与c++更相近，同时支持值类型与引用类型。
c#泛型可以搭配委托实现泛型委托。
c#不支持泛型推断，实例化泛型对象时需要显式声明泛型参数类型。

----

总结 >
泛型是多态性的表现，模版是泛型的一种具体实现，但c++中的模板属于编译时多态，java/c#中的泛型属于运行时多态。
java/c#中的泛型可以实现类型约束，只有满足特定约束的类型才能正常实例化。
c++模板虽然没有提供类型约束功能，但模板能够接受非类型参数。

========


关于bool类型 >>
c++/c >
c语言中没有bool类型，一般将0视为false，将1视为true。在if和while之类的语句或是&&和||之类的逻辑运算符中，将数值0作为假，0以外的数值为真。
c++中拥有bool类型，true和false可以转换为int型，分别为1和0；int型数据也可以转化为bool型，非0值为true，0为false。
java >
java中的布尔类型关键字是boolean，取值为true和false，不可与int型相互转换。
在java中if和while之类的语句不能将数值作为真假判断，只能接受boolean类型。
c# >
c#中的布尔类型关键字为bool，取值与用法类似与java，不能与int相互转化。int数值也不能做为真假判断标准。
python >
python中bool对象用法类似c++，取值为True和False(注意首字母要大写！)，数值与布尔类型之间可以使用bool()函数转换。

========


关于参数默认值 >>
c++ >
c++中函数可以使用带有默认值的参数，带有默认值的参数位置连续且置于无默认值的参数之后。
调用有默认参数的函数时，可以不给默认参数赋值，也可以部分的给默认参数赋值，编译器会根据给出参数的个数按位置匹配参数。
在c++中，调用具有默认值的函数时需要注意避免与函数重载发生冲突，带有二义性的函数调用将不能通过编译(即使该函数调用存在完全匹配的函数原型)。
c++函数的默认参数不会随着函数指针一同传递，即通过函数指针的形式访问某个在定义时带有默认参数的函数，其默认参数并不会生效。
java >
java中没有默认参数的概念。
c# >
在c#4.0中引入了默认参数的概念。
c#中默认参数的使用方式基本与c++中类似，但c#在解决带有二义性的函数调用时，优先匹配函数原型完全相同的函数(即当一个函数调用存在完全匹配的函数原型时，就会忽略掉其它的实现)。
python >
python同样支持参数默认值，但由于python不支持函数重载，故不存在函数调用的二义性。

========


关于函数定义嵌套和类嵌套 >>
在c/c++/c#/java等主流语言中，函数的定义必须是平行的，函数在定义时不允许相互嵌套，但是在函数的定义中可以嵌套类的定义，类中可以添加成员函数。
c/c++ >
gcc编译器扩展了c语言的语法使其能够在函数定义的内部嵌套函数定义，但这这特性不是c语言标准，也不被c++所支持，除了gcc之外的clang，clang++，g++等编译器时不支持这个特性的。
c++中的类不支持static关键字，但内部类中可以创建静态成员，同时内部类像普通成员一样受到访问权限的控制，只有public的内部类才能在类之外的区域被访问和实例化。
c++中内部类与外部类之间的访问权限与普通类相同，即内部类不能直接访问外部类的非静态成员，外部类也不能直接访问内部类的非静态成员，想要让外部类与内部类之间相互访问非静态成员需要借助实例对象。
实例化内部类采用 "外部类名::内部类名 内部实例名(内部类构造函数参数表)" 或者指针形式 "外部类名::内部类名 *内部实例指针名 = new 外部类名::内部类名(内部类构造函数参数表)"。
java >
java中内部类能够访问外部类的任意成员，但外部类访问内部类需要建立对象，格式为 "外部类名 外部实例名 = new 外部类名(外部类构造函数参数表); 外部类名.内部类名 内部实例名 = 外部实例名.new 内部类名(内部类构造函数参数表)"，或者隐藏外部实例名采用 "外部类名.内部类名 内部实例名 = new 外部类名(外部类构造函数参数表).new 内部类名(内部类构造函数参数表);"。
java中的普通内部类中不能创建静态成员。
java中的内部类可以使用static关键字定义为静态内部类(static关键字不能用于外部类上)。
c# >
c#中的内部类被称为嵌套类，嵌套类能够访问外部类所有访问级别的成员(即内部类被视为外部类的一个成员)，但是外部类只能够访问修饰符为public，internal嵌套类的成员。
c#中实例化嵌套类采用 "外部类类名.内部类类名 内部类实例名 = new 外部类类名.内部类类名(内部类构造函数参数表);"。

========


关于静态类 >>
c++ >
c++中不能对类使用static关键字，因而不存在静态类的概念。
java >
java中普通类之前是不能使用static关键字修饰的，只有内部类前才能加static关键字称为静态内部类。
在java中，内部类是不能定义静态成员的，只有在内部类之前加上static关键字，才能在内部类中定义静态成员。
java中静态内部类里同样可以定义非静态成员。
java中调用静态内部类的成员采用 "外部类名.静态类名.静态成员" 的方式。
c# >
在c#中，无论内部类或是外部类都可以使用static关键字，使用static定义的类为静态类，静态类只能包含静态成员，同时不能被实例化，也不能被继承(即为密封类)，也不能包含实例构造函数(有参构造函数)。
访问静态类的成员用 "静态类名.静态成员" 的方式。
访问实例类的静态内部类中的成员用 "实例类名.静态类名.静态成员" 的方式。
python >
python中不能对类使用static关键字，因而没有静态类的概念。

========


关于回调函数 >>
回调函数是将某类签名的函数作为参数传递到函数中的一种函数。回调函数能够根据传入函数入口不同，执行不同的代码段。

----

c/c++ >
在c/c++中，实现回调函数的方式是函数指针。
java >
java中，由于没有指针的概念，通过接口来实现回调函数，将接口对象作为参数，在回调函数中调用接口的函数，根据传入函数的实现接口的不同实例，调用的同一个接口函数会有不同的实现。
c# >
c#默认默认模式下也没有指针的概念，但是c#提供了另一种方式"委托"来安全地实现函数指针的功能(委托可以视为函数对象)，因此，在c#中，可以方便的将委托对象作为回调函数的参数实现回调函数功能。
python >
python中函数本身可以当作变量来传递，可以很方便地将传入的函数回掉。

----

实例代码：
编写一个函数int getNum(int, int)，根据传入参数的不同，然函数分别返回两个参数的和以及两个参数的积。

c/c++ >
#include <stdio.h>

int addition(int m, int n)
{
	return m + n;
}

int multiplication(int m, int n)
{
	return m * n;
}

void callBack(int (*getNum)(int, int))
{
	printf("%d\n", getNum(5, 10));
}

int main(void)
{
	callBack(addition);
	callBack(multiplication);
	return 0;
}

java >
interface A {
	int getNum(int m, int n);
}

public class Test {
	
	static A addition = new A() {
		@Override
		public int getNum(int m, int n) {
			return m + n;
		}
	};

	static A multiplication = new A() {
		@Override
		public int getNum(int m, int n) {
			return m * n;
		}
	};

	static void callBack(A a) {
		System.out.println(a.getNum(10, 5));
	}

	public static void main(String[] args) {
		callBack(addition);
		callBack(multiplication);
	}
}

c# >
using System;

class Test
{
	delegate int GetNum(int m, int n);
	
	static int addition(int m, int n)
	{
		return m + n;
	}
	
	static int multiplication(int m, int n)
	{
		return m * n;
	}
	
	static void callBack(GetNum getNum)
	{
		Console.WriteLine("{0}", getNum(5, 10));
	}
	
	static void Main(string[] args)
	{
		callBack(addition);
		callBack(multiplication);
	}
}

python >
def addition(m, n):
	return m + n

def multiplication(m, n):
	return m * n

def callBack(getNum):
	print(getNum(5, 10))

callBack(addition)
callBack(multiplication)

输出结果：
15
50

----

使用Lambda表达式 >
在现代的编程语言中，都不同程度地提供了对Lambda表达式的支持，在语言原有的基础上使用Lambda表达式，能够大幅度精简代码量。
上述回调函数的用法可以使用Lambda表达式已更简洁的形式实现。
不同语言对Lambda表达是的支持程度不同，各个语言的Lambda都有自己的特点：

c++ >
c++语言从c++11开始提供了对Lambda表达式的支持。
相比其它语言的Lambda表达式，c++中的Lambda语法不够简洁，但提供了较强的自定义功能。
在c++中Lambda表达式可以绑定为函数对象(使用std::function)，在Lambda中能够访问外部变量，且在Lambda中可以自定义对当前环境下的变量的捕获方式(不捕获/值传递/引用传递)。
java >
java语言从1.8开始部分支持Lambda表达式，相比其他语言，java的Lambda表达式就一残废。
java中没有函数对象的概念(函数接口不算)，Lambda表达式主要用来实现函数接口，用在一些原本需要函数接口的地方，比如Swing中的事件监听器，仅此而已。
java中的Lambda语法类似c#，在只有一个Lambda参数时能够省略参数小括号，只有一条函数体语句时可以省略函数体外的大括号。
java中的Lambda能够访问当前作用域中的变量。
c# >
c#从3.0开始支持Lambda表达式，c#中的Lambda表达式是主流非函数式编程语言中最强大的，c#中的Lambda与c#语言的特色delegate互通，能够更加简洁地代替匿名委托，实现回调、事件等，同时Lambda还能方便地用在Linq中进行数据库操作。
从C#6.0开始，Lambda表达式直接可以用于成员函数的定义。
python >
python中的Lambda表达式有诸多限制，python中的Lambda表达式只允许有一行函数体，这大大限制了Lambda的应用(但也比残废的java强)。python中的Lambda也可以作为函数对象使用。

示例代码：

c++(需要c++11以上。只有c++，c语言没有提供对Lambda的支持) >
#include <iostream>
#include <functional>

using namespace std;

function<int(int, int)> addition = [](int m, int n) { return m + n; };
function<int(int, int)> multiplication = [](int m, int n) { return m * n; }; 
function<void(const function<int(int, int)>&)> callBack = 
	[](const function<int(int, int)> &f) { cout << f(5, 10) << endl; };

int main(void)
{
	callBack(addition);
	callBack(multiplication);
	return 0;
}

java(需要JDK1.8以上) >
interface A {
	int getNum(int m, int n);
}

public class Test {

	static A addition = (m, n) -> m + n;
	static A multiplication = (m, n) -> m * n;

	static void callBack(A a) {
		System.out.println(a.getNum(5, 10));
	}

	public static void main(String[] args) {
		callBack(addition);
		callBack(multiplication);
	}
}

c#(需要c#3.0以上) >
using System;

class Test 
{
	static Func<int, int, int> addition = (m, n) => m + n;
	static Func<int, int, int> multiplication = (m, n) => m * n;
	static Action<Func<int, int, int>> callBack = 
		f => Console.WriteLine(f(5, 10));

	static void Main(string[] args)
	{
		callBack(addition);
		callBack(multiplication);
	}
}

python >
addition = lambda m, n: m + n
multiplication = lambda m, n: m * n
callBack = lambda f: print(f(5, 10))

callBack(addition)
callBack(multiplication)

输出结果：
15
50

----