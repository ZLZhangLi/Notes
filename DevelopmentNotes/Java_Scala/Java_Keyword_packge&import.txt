关于Java中package和import关键字的使用 >>

在Java中，没有使用package的话，在javac编译java文件生成class字节码时，需要将所有用到的源码文件写在参数中，不在当前目录下的源码文件要写清路径。
如果源码文件过多，则可以使用package关键字将其打包归类，然后在主类所在的文件中使用import关键字来将包导入使用。
如果没有使用package关键字，则所有的内容被视为在一个包中。

import的格式是：
import [包名].[类名]
如果需要包含内部类，则可以使用多级import，如：
import [包名].[类名].[类名]....
需要注意的是，import与代码文件的路径无关(但运行class文件时需要将class文件放在与其源码中package名称相同的对应目录下，否则会在执行时出错)。
另外，包名也可以是*.*.*的形式。

Java 1.5中新加入了import static关键字，相比传统的import，import static关键字的包含目标是类中的静态方法，格式如下：
import static [包名].[类名].[类名]....[静态方法名]
这样能够在使用对应类的静态方法时不必写出类名而是直接写出函数名即可。

举例：

有两个文件A.java和B.java。
文件B中的类被A中引用,则将B打包,代码中添加 package b，并放在b目录下。
而文件A中引用B中的类。
按照要求，两文件的位置：
文件A路径为~/A.java。
文件B路径为~/b/B.java。

实例代码(普通import)：

A.java:

import b.B;

public class A {
	public static void main(String[] args) {
		B.getNow();
	}	
}


B.java:

package b;

public class B {
	public static void getNow() {
		System.out.println("Success!");
	}
}

实例代码(import static)：

A.java:

import static b.B.getNow;

public class A {
	public static void main(String[] args) {
		getNow();
	}	
} 

B.java:

package b;

public class B {
	public static void getNow() {
		System.out.println("Success!");
	}
}

其中A.java文件能够正常调用类B的方法getNow()。
一个java文件只能有一个public类，java文件的名称应该与那个public类的类名一致。
需要注意的是，package打包的文件最好放在与包名相同的文件夹中，这样生成的字节码class文件才会在对应目录生成。如果源码是放在一处的，则编译之后产生的字节码文件需要按照package关系放在与包名相同的目录下，否则执行class文件时会报错，显示找不到对应的class文件！



使用第三方jar包的编译/运行方式 >>
很多时候，我们需要使用java官方库之外的第三方库(jar文件)，编译时需要添加额外的参数。
假设代码中引用了一个第三方库，则编译时应使用-cp参数，如下：

$ javac -cp [第三方库的路径] [源码文件]

编译生成的class文件是无法直接被java指令执行的，因为该class文件使用了第三方库，而这个库的位置并不在系统的环境变量之中，因此运行也需要显式地指定所需库的位置：

$ java -Djava.ext.dirs=[第三方库所在的目录] [编译生成的class文件]
